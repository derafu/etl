# Derafu ETL Core Components

direction: up

# Extract components
Extract: {
  shape: rectangle
  style.fill: "#e7f5e9"
  style.stroke: "#43a047"

  DataSource: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  DataExtractor: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  DataExtractor -> DataSource
}

# Transform components
Transform: {
  shape: rectangle
  style.fill: "#e3f2fd"
  style.stroke: "#1976d2"

  DataRules: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  DataTransformer: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  DataTransformer -> DataRules
}

# Load components
Load: {
  shape: rectangle
  style.fill: "#fff8e1"
  style.stroke: "#f57f17"

  DataTarget: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  DataLoader: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  DataLoader -> DataTarget
}

# Schema components
Schema: {
  shape: rectangle
  style.fill: "#f3e5f5"
  style.stroke: "#8e24aa"

  SchemaSource: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  SchemaTarget: {
    shape: rectangle
    style.fill: "#ffffff"
  }
}

# Pipeline orchestration
Pipeline: {
  shape: rectangle
  style.fill: "#ffebee"
  style.stroke: "#c62828"
  style.stroke-width: 2

  PipelineInterface: {
    shape: rectangle
    style.fill: "#ffffff"
    style.stroke-dash: 3
  }

  Pipeline: {
    shape: rectangle
    style.fill: "#ffffff"
  }

  Pipeline -> PipelineInterface: implements
}

# Connect the main components
Pipeline -> Extract: "1. extract()"
Extract -> Transform: "2. transform()"
Transform -> Load: "3. load()"
Load -> Pipeline: "4. return result"

# Schema connections
Extract.DataSource -> Schema.SchemaSource: "extract schema"
Schema.SchemaSource -> Schema.SchemaTarget: "convert"
Schema.SchemaTarget -> Load.DataTarget: "apply schema"

# Add description
description: {
  shape: text
  label: "ETL Pipeline Flow: Extract → Transform → Load"
  style.font-size: 14
  style.italic: true
  style.multiple: true
  style.underline: true
}
